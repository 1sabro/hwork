''' Введение в функции'''
''' Аннотации -> помогают сделать код ирнформативным и
 избавить от некоторых проблем динамической типизации,
 никак не влияет на работу кода'''

# num: int = 10 предупредить какой тип данных нужно передавать, присваивать
# num = 'hello'
# print(num)

'''=============== Функции =============='''
#  Функция -> именованный блок кода ( есть имя), который выполняет одну задачу
#  Может принимать в себя аргументы и возвращать результат
#  Вызывается многократно по имени

# def -> ключевое слово для обьявления функции ( указывает тпитону, что мы
# хотим создать функцию)

'''Синтаксис'''
# def <название_функции>(параметры):
#     <методы функций>

# def my_len(obj):
#     count = 0
#     for i in obj:
#         count += 1
#     return count

# a = my_len([1,2,3,4,5])
# # print(a)


# def sum_(num1: int, num2:int):
#     res = num1 + num2
#     print(res)
#     return res

# a = sum_(2,3)
# print(a)
# sum_(4,'he')
# print(sum_(1,2))

# sum_()

'''return -> используется для возвращения результата,
который можно сохранить в переменной и где то изпользовать
после return функция завершает свою работу, если в функции не прописан 
return -> функция возвращает NONE'''

# str_ = 'hello'
# print(str_.replace('h', 'hello'))

# list_ = [1,2,3,4]
# print(list_.append([7,8,9]))
# print(list_)

'''================== Параметры и аргументы ==================='''

# параметры -> локальные переменные внутри функци, значения параметрам задаются при вызове функции

# Аргументы -> значения, которые мы задаем параметрам

# def a (параметр):
#   pass 

# a (аргумент)

'''========== Виды параметров=========='''

# 1. обязательные (a,b, list_) ->
# определяют какие аргументы нужно передать
# 2 необязательные
# 2.1 с дефолтом (имеет значение по умолчанию)
# 2.2 args -> принимает (все) наименованные аргументы (tuple)
# 2.3 kwargs -> принимает (все) наименованные аргументы (dict)
#  a = 17
# def func(a = 'hello', * args, **kwargs):
#     print(a)
#     print(args)
#     print(kwargs)

# func(7, 'hello', 9,8, m = 7)    


'''=========== Виды аргументов ==========='''
# 1. позиционные -> по позиции (a,b,c) ->
# (1,2,3) a = 1 b = 2 c = 3
# 2. именоапнные (по названию)

# def test(a,b,c):
#     print(a,b,c)

# test(a = 1, b = 4, c = 5)

# Распаковка 
# list_ = [*range(1,11)]
# print(list_)

'''
def name_of_function():
    some code
    return variable
    
name_of_function()
'''

# def substract():
#     num1 = 20
#     num2 = 5
#     print(num1+num2)
#     return num1 - num2
# print(substract())

# def get_word(word):
#     list_letters = list(word)
#     return list_letters
# def get_vowels(letters):
#     vowels = ['a', 'y', 'i', 'o', 'e','u']
#     list_vowels = [letter for letter in letters if letter is vowels]
#     result = ''.join(list_vowels)
#     return result
# my_word = input('enter:')
# print(get_vowels(get_word(my_word)))

